"use strict";(self.webpackChunkdocus=self.webpackChunkdocus||[]).push([[1477],{30010:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"/github-data-is-booming","metadata":{"permalink":"/blog/github-data-is-booming","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/github-data-is-booming/index.mdx","source":"@site/blog/github-data-is-booming/index.mdx","title":"GitHub Events Are Booming! Are Bots the Reason?","description":"This post dives deeply into GitHub event trending, why GitHub events are surging, and whether GitHub\'s architecture can handle the increasing load.","date":"2022-08-01T00:00:00.000Z","formattedDate":"August 1, 2022","tags":[{"label":"insight","permalink":"/blog/tags/insight"}],"readingTime":4.105,"truncated":false,"authors":[{"name":"Mia Zhou","title":"Technical Content Developer","url":"https://github.com/luzizhuo","imageURL":"https://github.com/luzizhuo.png","key":"mia"},{"name":"Wink Yao","title":"Head of Community & Developer Ecosystem Team at PingCAP.","url":"https://twitter.com/golangwink","imageURL":"https://github.com/winkyao.png","key":"winkyao"},{"name":"Caitin Chen","title":"Technical Content Developer","url":"https://github.com/CaitinChen","imageURL":"https://github.com/caitinchen.png","key":"caitin"}],"nextItem":{"title":"Build a Better GitHub Insight Tool in a Week? A True Story","permalink":"/blog/why-we-choose-tidb-to-support-ossinsight"}},"content":"The [OSS Insight](https://ossinsight.io/) website displays the data changes of GitHub events in real time. GitHub events are activities triggered by user actions on GitHub, for example, commenting and forking a repository. **In nearly seven weeks, GitHub events increased by about 150 million, from 4.7 billion to 4.85 billion.** GitHub events are booming!\\n\\nThis post dives deeply into GitHub event trending, why GitHub events are surging, and whether GitHub\'s architecture can handle the increasing load.\\n\\n## Historical data analysis\\n\\nThe OSS Insight database includes all the GitHub events since 2011. When we plot the number of events by year, we can see that since 2018 they have been increasing rapidly.\\n\\n<br />\\n\\n![GitHub event trending](./github-event-trending.jpg)\\n\\n<center><em>GitHub event trending</em></center>\\n\\n<br />\\n\\nThe figure below shows how long it takes to grow each billion events in GitHub.\\n\\n<br />\\n\\n![The time to reach a billion GitHub events](./github-data-is-booming.jpg)\\n\\n<center><em>The time to reach a billion GitHub events</em></center>\\n\\n<br />\\n\\n**It\'s taking less and less for GitHub to generate 1 billion events. It took more than 6 years for the first billion events and only 13 months for the last billion!**\\n\\n## The secret behind the exponential growth of GitHub events\\n\\n[GitHub Actions](https://github.blog/2018-10-16-future-of-software/) was released in October 2018. Since August 2019, it has [supported continuous integration and continuous delivery (CI/CD)](https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/), and it has been free for open source projects. Therefore, projects hosted on GitHub can automate their own development workflows, and a large number of automation-related bot applications have appeared on GitHub Marketplace. Could GitHub events\' data growth be related to these?\\n\\nTo find the answer, we divided the events into data from humans and data from bots and plotted them with the following histogram. The blue columns represent the human data, and the yellow columns represent the bot data.\\n\\n<br />\\n\\n![Bot events vs. human events](./bot-events-vs-human-events.jpg)\\n\\n<center><em>Bot events vs. human events</em></center>\\n\\n<br />\\n\\nAs you can see, the proportion of GitHub bot events has increased each year. In 2015, they were only 1.23% of all events. In early July of this year, they reached 13.2%. To show the data changes of bot events more clearly, we made the following line chart.\\n\\n<br />\\n\\n![Bot event trending](./bot-event-trending.jpg)\\n\\n<center><em>Bot event trending</em></center>\\n\\n<br />\\n\\nThis figure shows that since 2019, bot events have been grown faster than before. As [Mini256](https://github.com/Mini256), a TiDB community contributor said in [Love, Code, and Robot \u2014 Explore robots in the world of code](https://ossinsight.io/blog/say-thanks-to-github-robots):\\n\\n> For now, rough statistics find that there are more than 95,620 bots on GitHub. The number doesn\'t seem like so much, but wait...\\n\\n> **These 95 thousand bot accounts generated 603 million events. These events account for 12.82% of all public events on GitHub**, and these GitHub robots have served over 18 million open source repositories.\\n\\nBots are playing an increasingly important role on GitHub. Many projects are handing over automated work to bots. We expect that GitHub events will grow faster in the future.\\n\\n## When will GitHub reach 10 billion events?\\n\\nHow many GitHub events will there be by the end of 2022? We fit predictions to GitHub historical data.\\n\\n<br />\\n\\n![Human event fit (left) vs. bot event fit (right)](./human-event-fit-vs-bot-event-fit.jpg)\\n\\n<center><em>Human event fit (left) vs. bot event fit (right)</em></center>\\n\\n<br />\\n\\nIt\'s estimated that by the end of 2022, GitHub events will reach 5.36 billion.\\n\\n<br />\\n\\n<center>\\n<img src={require(\'./github-event-prediction.jpg\').default} width = \\"50%\\" alt=\\"github-event-prediction\\"/>\\n</center>\\n\\n<center><em>GitHub event prediction</em></center>\\n\\n<br />\\n\\nAccording to this prediction, GitHub events will exceed 10 billion in February 2025.\\n\\n<br />\\n\\n<center>\\n<img src={require(\'./gitub-events-exceed-10-billion.jpg\').default} width = \\"50%\\" alt=\\"gitub-events-exceed-10-billion\\"/>\\n</center>\\n\\n<center><em>GitHub events will exceed 10 billion in 2025</em></center>\\n\\n<br />\\n\\n## Can MySQL sharding support such a huge amount of data?\\n\\nGitHub uses MySQL as the main storage for all non-git warehouse data. The rapid growth of data volume poses a great challenge to GitHub\'s high availability. In March 2022, GitHub had 3 service disruptions, each lasting 2-5 hours. [The official investigation report](https://github.blog/2022-03-23-an-update-on-recent-service-disruptions/) shows the MySQL database caused the outages. During peak load periods, the GitHub mysql1 database (the main database cluster in GitHub) load increased. Therefore, database access reached the maximum number of connections. This affected the performance of many GitHub services and features.\\n\\nIn fact, over the past few years GitHub has optimized its databases. For example, it added clusters to support platform growth and partitioned the main database. But these improvements did not fundamentally solve the problem. In the near future, GitHub events will exceed 5 billion, or even 10 billion. Can MySQL sharding support such data surge?\\n\\n## Data sources\\n\\nAll the analysis data in this article comes from [OSS Insight](https://ossinsight.io/), a tool based on [TiDB]( https://en.pingcap.com/tidb-cloud/?utm_source=ossinsight&utm_medium=referral) to analyze and gain insights into GitHub events data.\\n\\nYou can use it to easily get insights about developers and repositories based on billions of GitHub events. You can also get the latest and historical rankings and trends in technical fields.\\n\\n<br />\\n\\n![The OSS Insight website](./oss-insight-website.jpg)\\n\\n<center><em>The OSS Insight website</em></center>\\n\\n<br />"},{"id":"/why-we-choose-tidb-to-support-ossinsight","metadata":{"permalink":"/blog/why-we-choose-tidb-to-support-ossinsight","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/why-we-choose-tidb-to-support-ossinsight/index.mdx","source":"@site/blog/why-we-choose-tidb-to-support-ossinsight/index.mdx","title":"Build a Better GitHub Insight Tool in a Week? A True Story","description":"The story about how we build the ossinsight project, including how we deal with the historical and real-time huge data, the database solutions and so on.","date":"2022-06-20T00:00:00.000Z","formattedDate":"June 20, 2022","tags":[{"label":"tidb","permalink":"/blog/tags/tidb"}],"readingTime":9.47,"truncated":false,"authors":[{"name":"Wink Yao","title":"Head of Community & Developer Ecosystem Team at PingCAP.","url":"https://twitter.com/golangwink","imageURL":"https://github.com/winkyao.png","key":"winkyao"},{"name":"Fendy Feng","title":"Technical Content Developer","url":"https://github.com/septemberfd","imageURL":"https://github.com/septemberfd.png","key":"fendy"}],"prevItem":{"title":"GitHub Events Are Booming! Are Bots the Reason?","permalink":"/blog/github-data-is-booming"},"nextItem":{"title":"Love, Code, and Robot \u2014 Explore robots in the world of code","permalink":"/blog/say-thanks-to-github-robots"}},"content":"In early January 2022, [Max](https://twitter.com/ngaut1), our CEO, a big fan of open-source, asked if my team could build a small tool to help us understand all the open-source projects on GitHub; and, that if everything worked well, we should open the API to help open source developers to build better insights. In fact, GitHub continuously publishes the public events in its open-source world through the open API. (Thank you and well done! Github). We can certainly learn a lot from the data!  \\n\\nI was excited about this project until Max said: \u201cYou\u2019ve only got one week.\u201d Well, the boss is the boss! Although time was tight and we were faced with multiple head-aching problems, I decided to take up this challenge. \\n\\n\\n## Headache 1: we need both historical and real-time data.\\n\\nAfter some quick research, we found [GHArchive](https://www.gharchive.org/), an open-source project that collects and archives all GitHub data from 2011 and updates it hourly. By the way, a lot of open-source analytical tools such as CNCF\'s [Devstats](https://github.com/cncf/devstats) rely on GH Archive, too. \\n\\n**Thanks to GH Archive, we found the data source.**\\n\\nBut there\'s another problem: hourly data is good, but not good enough. We wanted our data to be updated in real time\u2014or at least near real time. We decided to directly use the [GitHub event API](https://docs.github.com/en/rest/activity/events), which collects all events that have occurred within the past hour. \\n\\nBy combining the data from the GH Archive and the GitHub event API, we can gain streaming, real-time event updates.\\n\\n\\n<br />\\n\\n![GitHub event updates](./github-events-updates.gif)\\n\\n<center><em>GitHub event updates</em></center>\\n\\n<br />\\n\\n\\n## Headache 2: the data is huge!\\n\\nAfter we decompressed all the data from GH Archive, we found there were more than 4.6 billion rows of GitHub events. That\u2019s a lot of data!  We also noticed that about 300,000 rows were generated and updated each hour.\\n\\n<br />\\n\\n![The data volume of GitHub events occurred after 2011](./github-events.png)\\n\\n<center><em>The data volume of GitHub events occurred after 2011</em></center>\\n\\n<br />\\n\\nThe database solution would be tricky here. Our goal is to build an application that provides real-time data insights based on a continuously growing dataset. So, scalability is a must. NoSQL databases can provide good scalability, but what follows is how to handle complex analytical queries. Unfortunately, NoSQL databases are not good at that. \\n\\n<br />\\n\\n<center>\\n  <img width=\\"50%\\" src={require(\'@site/blog/why-we-choose-tidb-to-support-ossinsight/scalability-SQL.jpg\').default} alt=\'Scalability vs SQL\' />\\n</center>\\n\\n<br />\\n\\nAnother option is to use an OLAP database such as ClickHouse. ClickHouse can handle the analytical workload very well, but it is not designed for serving online traffic. If we chose it, we would need another database for the online traffic. \\n\\n<br />\\n\\n<center>\\n  <img width=\\"50%\\" src={require(\'@site/blog/why-we-choose-tidb-to-support-ossinsight/olap-onlineserving.jpg\').default} alt=\'OLAP vs Online Serving\' />\\n</center>\\n\\n<br />\\n\\nWhat about sharding the database and then building an extract, transform, load (ETL) pipeline to synchronize the new events to a data warehouse? This sounds workable.\\n\\n<br />\\n\\n![How a RDBMS handles the GitHub data](./sharded-architecture.png)\\n\\n<center><em>How a RDBMS handles the GitHub data</em></center>\\n\\n<br />\\n\\nAccording to our product manager\'s (PM\u2019s) plan, we needed to do some repo-specific or user-specific analysis. Although the total data volume was huge, the number of events was not too large for a single project or user. This meant using the secondary indexes in RDBMS would be a good idea. But, if we decided to use the above architecture, we had to be careful in selecting the database sharding key. For example, if we use `user_id` as the sharding key, then queries based on `repo_id` will be very tricky. \\n\\nAnother requirement from the PM was that our insight tool should provide OpenAPI, which meant we would have unpredictable concurrent traffic from the outside world. \\n\\nSince we\'re not experts on Kafka and data warehouses, mastering and building such an infrastructure in just one week was a very difficult task for us.\\n\\nThe choice is obvious now, and don\'t forget PingCAP is a database company! TiDB seems a perfect fit for this, and it\'s a good chance to eat our own dog food. So, why not using TiDB! :) \\n \\n\\n**If we use TiDB, can we get:**\\n- SQL support, including complex & flexible queries? \u2611\ufe0f \\n- Scalability?  \u2611\ufe0f \\n- Secondary index support for fast lookup? \u2611\ufe0f \\n- Capability for online serving? \u2611\ufe0f \\n\\nWow! It seems we got a winner! \\n\\n<br />\\n\\n![By using the secondary index, TiDB scanned 29,639 rows (instead of 4.6 billion rows) GitHub events in 4.9 ms](./tidb-scanned-kennytm.png)\\n\\n<center><em>By using the secondary index, TiDB scanned 29,639 rows (instead of 4.6 billion rows) GitHub events in 4.9 ms</em></center>\\n\\n<br />\\n\\n\\n**To choose a database to support an application like OSS Insight, we think TiDB is a great choice.** Plus, its simplified technology stack means a faster go-to-market and faster delivery of my boss\' assignment. \\n\\nAfter we used TiDB, we got a simplified architecture as shown below. \\n\\n<br />\\n\\n![Simplified architecture after we use TiDB](./how-different-db-handle-github-data.png)\\n\\n<center><em>Simplified architecture after we use TiDB</em></center>\\n\\n<br />\\n\\n## Headache 3: We have a \\"pushy\\" PM!\\n\\nJust as the subtitle indicates, we have a very \u201cpushy\u201d PM, which is not always a bad thing. :)  His demands kept extending, from the single project analysis at the very beginning to the comparison and ranking of multiple repositories, and to other multidimensional analysis such as the geographical distribution of stargazers and contributors. What\u2019s more pressing was that the deadlines stayed unchanged!!! \\n\\n**We had to keep a balance between the growing demands and the tight deadlines.**\\n\\nTo save time, we built our website using [Docusaurus](https://github.com/facebook/docusaurus), an open source static site generator in React with scalability, rather than building a site from scratch. We also used [Apache Echarts](https://github.com/apache/echarts), a powerful charting library, to turn analytical results into good-looking and easy-to-understand charts. \\n\\nWe chose TiDB as the database to support our website, and it perfectly supports SQL. This way, our back-end engineers could write SQL commands to handle complex and flexible analytical queries with ease and efficiency. Then, our front-end engineers would just need to display those SQL execution results in the form of good-looking charts. \\n\\nFinally, we made it. We prototyped our tool in just one week, and named it [OSS Insight](https://ossinsight.io/), short for open source software insights. We continued to fine-tune it, and it was [officially released](https://ossinsight.io/blog/explore-deep-in-4.6-billion-github-events/) on May 3. \\n\\n## How we deal with analytical queries with SQL\\n\\nLet\'s use one example to show you how we deal with complex analytical queries. \\n\\n### Analyze a GitHub collection: JavaScript frameworks\\n\\n[OSS Insight](https://ossinsight.io/) can analyze popular GitHub collections by many metrics including the number of stars, issues, and contributors. Let\u2019s identify which JavaScript framework has the most issue creators. \\nThis is an analytical query that includes aggregation and ranking. To get the result, we only need to execute one SQL statement: \\n\\n```sql\\nSELECT\\n   ci.repo_name  AS repo_name,\\n   COUNT(distinct actor_login) AS num\\nFROM\\n   github_events ge\\n   JOIN collection_items ci ON ge.repo_id = ci.repo_id\\n   JOIN collections c ON ci.collection_id = c.id\\nWHERE\\n   type = \'IssuesEvent\'\\n   AND action = \'opened\'\\n   AND c.id = 10005\\n   -- Exclude Bots\\n   and actor_login not like \'%bot%\'\\n   and actor_login not in (select login from blacklist_users)\\nGROUP BY 1\\nORDER BY 2 DESC\\n;\\n```\\n\\nIn the statement above, the `collections` and `collection_items` tables store the data of all GitHub repository collections in various areas. Each table has 30 rows. To get the order of issue creators, we need to associate the repository ID in the `collection_items` table with the real, 4.6-billion-row `github_events` table as shown below. \\n\\n\\n```\\n\\nmysql> select * from collection_items where collection_id = 10005;\\n+-----+---------------+-----------------------+-----------+\\n| id  | collection_id | repo_name             | repo_id   |\\n+-----+---------------+-----------------------+-----------+\\n| 127 | 10005         | marko-js/marko        | 15720445  |\\n| 129 | 10005         | angular/angular       | 24195339  |\\n| 131 | 10005         | emberjs/ember.js      | 1801829   |\\n| 135 | 10005         | vuejs/vue             | 11730342  |\\n| 136 | 10005         | vuejs/core            | 137078487 |\\n| 138 | 10005         | facebook/react        | 10270250  |\\n| 142 | 10005         | jashkenas/backbone    | 952189    |\\n| 143 | 10005         | dojo/dojo             | 10160528  |\\n...\\n30 rows in set (0.05 sec)\\n\\n```\\n\\nNext, let\'s look at the execution plan. TiDB is compatible with MySQL syntax, so its execution plan looks very similar to that of MySQL.\\n\\nIn the figure below, notice the parts in red boxes. The data in the table `collection_items` is read through `distributed[row]`, which means this data is processed by TiDB\u2019s row storage engine, TiKV. The data in the table `github_events` is read through `distributed[column]`, which means this data is processed by TiDB\u2019s columnar storage engine, TiFlash. TiDB uses both row and columnar storage engines to execute the same SQL statement. This is so convenient for OSS Insight because it doesn\u2019t have to split the query into two statements. \\n\\n<br />\\n\\n![TiDB execution plan](./tidb-execution-plan-2.png)\\n\\n<center><em>TiDB execution plan</em></center>\\n\\n<br />\\n\\n\\nTiDB returns the following result: \\n\\n```\\n+-----------------------+-------+\\n| repo_name             | num   |\\n+-----------------------+-------+\\n| angular/angular       | 11597 |\\n| facebook/react        | 7653  |\\n| vuejs/vue             | 6033  |\\n| angular/angular.js    | 5624  |\\n| emberjs/ember.js      | 2489  |\\n| sveltejs/svelte       | 1978  |\\n| vuejs/core            | 1792  |\\n| Polymer/polymer       | 1785  |\\n| jquery/jquery         | 1587  |\\n| jashkenas/backbone    | 1463  |\\n| ionic-team/stencil    | 1101  |\\n...\\n30 rows in set\\nTime: 7.809s\\n\\n``` \\n\\nThen, we just need to draw [the result](https://ossinsight.io/blog/deep-insight-into-js-framework-2021/#which-javascript-framework-have-the-widest-feedback-sources) with Apache Echarts into a more visualized chart as shown below. \\n\\n<br />\\n\\n![JavaScript frameworks with the most issue creators](./javascript-framework-rankings.png)\\n\\n<center><em>JavaScript frameworks with the most issue creators</em></center>\\n\\n<br />\\n\\n\\nNote: You can click the `REQUEST INFO` on the upper right side of each chart to get the SQL command for each result. \\n\\n## Feedback: People love it!\\n\\nAfter we released OSS Insight on May 3, we have received loud applause on social media, via emails and private messages, from many developers, engineers, researchers, and people who are passionate about the open source community in various companies and industries. \\n\\nI am more than excited and grateful that so many people find OSS Insight interesting, helpful, and valuable. I am also proud that my team made such a wonderful product in such a short time. \\n\\n<br />\\n\\n![Applause given by developers and organizations on Twitter-1](./twitter-1.png)\\n\\n![Applause given by developers and organizations on Twitter-1](./twitter-2.jpg)\\n\\n<center><em>Applause given by developers and organizations on Twitter</em></center>\\n\\n<br />\\n\\n\\n## Lessons learned \\n\\nLooking back at the process we used to build this website, we have learned many mind-refreshing lessons.\\n\\n**First, quick doesn\u2019t mean dirty, as long as we make the right choices.** Building an insight tool in just one week is tricky, but thanks to those wonderful, ready-made, and open source projects such as TiDB, Docusaurus, and Echarts, we made it happen with efficiency and without compromising the quality.  \\n\\n**Second, it\u2019s crucial to select the right database\u2014especially one that supports SQL.** TiDB is a distributed SQL database with great scalability that can handle both transactional and real-time analytical workloads. With its help, we can process billions of rows of data with ease, and use SQL commands to execute complicated real-time queries. Further, using TiDB means we can leverage its resources to go to market faster and get feedback promptly.  \\n\\nIf you like our project or are interested in joining us, you\u2019re welcome to **[submit your PRs](https://github.com/pingcap/ossinsight)** to our GitHub repository. You can also follow us on [Twitter](https://twitter.com/OSSInsight) for the latest information. \\n\\n\\n:::note\\n\\n### \ud83d\udccc Join our workshop\\n\\nIf you want to get your own insights, you can [join our workshop](https://share.hsforms.com/1E-qtGQWrTVmctP8kBT34gw2npzm) and try using TiDB to support your own datasets. \\n\\n:::"},{"id":"/say-thanks-to-github-robots","metadata":{"permalink":"/blog/say-thanks-to-github-robots","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/say-thanks-to-github-robots/index.mdx","source":"@site/blog/say-thanks-to-github-robots/index.mdx","title":"Love, Code, and Robot \u2014 Explore robots in the world of code","description":"This article describes the evolution of bots in the GitHub world, their behaviors and characteristics, and the impact they have brought to the open source world.","date":"2022-05-12T00:00:00.000Z","formattedDate":"May 12, 2022","tags":[],"readingTime":6.475,"truncated":true,"authors":[{"name":"Mini256","title":"Engineer of TiDB Community","url":"https://github.com/Mini256","imageURL":"https://github.com/Mini256.png","key":"Mini256"}],"prevItem":{"title":"Build a Better GitHub Insight Tool in a Week? A True Story","permalink":"/blog/why-we-choose-tidb-to-support-ossinsight"},"nextItem":{"title":"Deep Insights into JavaScript Frameworks","permalink":"/blog/deep-insight-into-js-framework-2021"}},"content":"import {CommonChart} from \\"../../src/components/CommonChart\\";\\n\\n\\n\\nWhen it comes to GitHub, we often see fake GitHub users who are always enthusiastic and active, giving timely feedback to project maintainers and contributors, and helping developers with tasks that can be automated. Yes, the next thing I want to discuss is something about GitHub bots.\\n\\n## Overview\\n\\nIn the [OSSInsight](https://ossinsight.io/) project, we have developed a number of metrics to provide insight into open source projects. When developing some open source project metrics, we always consider excluding bot-generated actions or events from the metric calculation. \\n\\nHowever, We can\'t ignore the contribution of robots in the domain of open source, and it\'s important to shift our thinking to look at what bots are doing on GitHub.\\n\\nGitHub bots help developers do a lot of work:\\n\\n- Issue triage and management. (For example: `stale[bot]`\u3001`todo[bot]`)\\n- Code review, security audit and quality inspection (For example, `snyk-bot`).\\n- Format checking like ensuring license agreement signing, or make sure  commit messages semantic. (For example: `CLAassistant`)\\n- Integration with third-party systems, including Jira, Slack, Jenkins and so on.\\n- As an agent to help contributor perform some operations needed permission on the repository. (For example: `k8s-ci-bot`\u3001`ti-chi-bot`)\\n\\n## History trends\\n\\nLooking at the historical data, we see that the number of GitHub bots grows significantly faster after 2019 (on average, 20,000 new bots are created each year)\\n\\n<CommonChart\\n  chart=\'dynamic-line\'\\n  query=\'bot-total-history\'\\n  formatSql={false}\\n  xIndex=\\"event_year\\"\\n  yIndex=\\"bots_total\\"\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\nI looked into what happened during the year and found that GitHub invested a lot in its software development infrastructure (including bots) during the year.\\n\\n- In May 23, 2019, GitHub announced acquired Dependabot (Aka, `dependabot[bot]`).\\n\\n- In June 17th, 2019, [GitHub announced acquired Pull Panda](https://github.blog/2019-06-17-github-acquires-pull-panda/).\\n\\n- In September 18th, 2019, [GitHub announced acquired Semmle](https://github.blog/2019-09-18-github-welcomes-semmle/) (Aka, the team builded `lgtm-com[bot]`).\\n\\nAt this year, we, humans beings, were amazed to discover that bots could find problems, submit PRs, wait CI test code, complete merges and comment on PRs on their own without any human involvement. \\n\\n[![Bot automatically completes a pull request](./bot_automatically_completes_a_pull_request.png)](https://github.com/buildo/react-components/pull/1367)\\n\\nFor now, rough statistics found that there are more than 95,620 bots on GitHub, the number doesn\'t seem like so much, but wait...\\n\\n<details>\\n<summary>Click here to show computational process</summary>\\n\\nBefore that, we had collected 4.7 billion github events stored in our database. Now we can count the number of bots on GitHub by executing a simple SQL statement:\\n\\n```sql\\nSELECT COUNT(DISTINCT actor_login) AS \'Bots\'\\nFROM github_events ge\\nWHERE actor_login REGEXP \'^(bot-.+|.+bot|.+\\\\\\\\[bot\\\\\\\\]|.+-bot-.+|robot-.+|.+-ci-.+|.+-ci|.+-testing|.+clabot.+|.+-gerrit|k8s-.+|.+-machine|.+-automation|github-.+|.+-github|.+-service|.+-builds|codecov-.+|.+teamcity.+|jenkins-.+|.+-jira-.+)$\';\\n```\\n\\nIn this SQL statement, we use a regular expression to determine which `actor_login` is the robot login. For example, the well known star robot `dependabot[bot]`, whose github login ends with `[bot]`, we can find more bots among a large number of events based on this method.\\n\\n```\\n+-------+\\n| Bots  |\\n+-------+\\n| 95620 |\\n+-------+\\n1 row in set\\nTime: 16.921s\\n```\\n\\n</details>\\n\\n**\ud83d\udc40 These 95 thousand bot accounts generated 603 million events, these events account for 12.82% of all public events on GitHub.**\\n\\n<details>\\n<summary>Click here to show computational process</summary>\\n\\n1. Count the total number of public events triggered by GitHub bot\\n\\n```sql\\nSELECT COUNT(*) AS \'Bot\'\'s events\'\\nFROM github_events ge\\nWHERE actor_login REGEXP \'^(bot-.+|.+bot|.+\\\\\\\\[bot\\\\\\\\]|.+-bot-.+|robot-.+|.+-ci-.+|.+-ci|.+-testing|.+clabot.+|.+-gerrit|k8s-.+|.+-machine|.+-automation|github-.+|.+-github|.+-service|.+-builds|codecov-.+|.+teamcity.+|jenkins-.+|.+-jira-.+)$\';\\n```\\n\\n```\\n+--------------+\\n| Bot\'s events |\\n+--------------+\\n| 603554237    |\\n+--------------+\\n1 row in set\\nTime: 13.087s\\n```\\n\\n2. Count the total number of all public events on GitHub\\n\\n```sql\\nSELECT COUNT(*) AS \'All public events\' FROM github_events ge;\\n```\\n\\n```\\n+-------------------+\\n| All public events |\\n+-------------------+\\n| 4705191048        |\\n+-------------------+\\n1 row in set\\nTime: 4.322s\\n```\\n\\n3. Calculate the proportion of the former in the latter\\n\\n```sql\\nSELECT CONCAT(TRUNCATE(603554237 / 4705191048 * 100, 2), \'%\') AS \'Proportion of Events\';\\n```\\n\\n```\\n+----------------------+\\n| Proportion of Events |\\n+----------------------+\\n| 12.82%               |\\n+----------------------+\\n1 row in set\\nTime: 0.047s\\n```\\n\\n\\n</details>\\n\\nAnd these GitHub robots have served over 18 million open source repositories.\\n\\n<details>\\n<summary>Click here to show computational process</summary>\\n\\n```sql\\nSELECT COUNT(DISTINCT repo_id) AS \'Repositories\'\\nFROM github_events ge\\nWHERE actor_login REGEXP \'^(bot-.+|.+bot|.+\\\\\\\\[bot\\\\\\\\]|.+-bot-.+|robot-.+|.+-ci-.+|.+-ci|.+-testing|.+clabot.+|.+-gerrit|k8s-.+|.+-machine|.+-automation|github-.+|.+-github|.+-service|.+-builds|codecov-.+|.+teamcity.+|jenkins-.+|.+-jira-.+)$\';\\n```\\n\\n```\\n+--------------+\\n| Repositories |\\n+--------------+\\n| 18415262     |\\n+--------------+\\n1 row in set\\nTime: 27.060s\\n```\\n\\n</details>\\n\\n## Cases study\\n\\n### Dependabot\\\\[bot\\\\]\\n\\n`dependabot[bot]` is a hard-working bot responsible for helping open source projects keep their dependencies up to date.\\n\\nBy analyzing depentenbot\'s Push commit time, we found that he likes to start his busy week at 8:00 on Mondays (at GMT timezone).\\n\\n<CommonChart\\n  chart=\'heatmapchart\'\\n  category=\'bot-dependabot-commits-time-distribution\'\\n  xIndex=\'hour\'\\n  yIndex=\'dayofweek\'\\n  valueIndex=\'pushes\'\\n  formatSql={false}\\n/>\\n\\nIt is commendable that, after a series of log4j security vulnerabilities came to light, it helped many Java-language repositories to update the dependency to a secure version timely.\\n\\n\x3c!-- TODO: Wait for importing title field --\x3e\\n\\n\x3c!-- ```sql\\nSELECT toYYYYMMDD(created_at), COUNT(DISTINCT repo_name)\\nFROM github_events\\nWHERE actor_login = \'dependabot[bot]\' and event_type = \'PullRequestEvent\' \\n      AND (title LIKE \'%log4j%2.%2.15.0\')\\nGROUP BY toYYYYMMDD(created_at)\\nORDER BY toYYYYMMDD(created_at);\\n``` --\x3e\\n\\n### Stale Bots\\n\\nStale Bot is a controversial class of robots, they are responsible for reminding maintainers to continue promoting long-term stale issue.\\n\\n<table>\\n<tr>\\n    <th>Bad practice</th>\\n    <th>Best practices</th>\\n</tr>\\n<tr>\\n<td>\\n\\nThe user from Gatsby:\\n\\n> I used to open GitHub issues to Gatsby to report bugs. Almost nothing was ever fixed and every few weeks I had to manually clickety-click to keep the issues alive because of the stale bot. Guess what I do now? I don\'t report bugs to Gatsby, and I recommend against using Gatsby in newer projects.\\n\\n</td>\\n<td>\\n\\nThe user from NixOS:\\n\\n> IMO NixOS has the right stalebot settings <sub>[0]</sub>. It was discussed thouroughly in the RFC, as to choose the right information text and other actions by the bot. For example, the bot will only mark the issue/PR as stale and will never close the issue or lock it. Issues are only ever closed by humans.\\nThe information text they came up with is quite a bit longer than the ansible one <sub>[1]</sub>. I think this is a very important point when adding such a bot, otherwise the user will be left helpless.\\n\\n> [0]: https://github.com/NixOS/rfcs/pull/51\\n\\n> [1]: https://github.com/NixOS/nixpkgs/pull/92254\\n\\n</td>\\n</tr>\\n</table>\\n\\nTo verify the above statement, we run the following query through the SQL statement:\\n\\n```sql\\nSELECT actor_login, COUNT(DISTINCT pr_or_issue_id) AS cnt\\nFROM github_events ge\\nWHERE\\n    repo_name = \'gatsbyjs/gatsby\'\\n    AND type = \'IssuesEvent\'\\n    AND action = \'closed\'\\n    AND (actor_login LIKE \'%[bot]\' OR actor_login LIKE \'%bot\')\\nGROUP BY actor_login\\nORDER BY cnt DESC;\\n```\\n\\nWe know from the following query that many Issues in the `gatsbyjs/gatsby` repository have been closed by the stale bots.\\n\\n```\\n+---------------------+------+\\n| actor_login         | cnt  |\\n+---------------------+------+\\n| gatsbot[bot]        | 1389 |\\n| github-actions[bot] | 777  |\\n| gatsbybot           | 265  |\\n| stale[bot]          | 50   |\\n| renovate[bot]       | 1    |\\n+---------------------+------+\\n5 rows in set\\nTime: 0.100s\\n```\\n\\nI think it is necessary to distinguish between what should be done by robots and what must be done with human involvement.\\n\\n### Weird bots\\n\\nThere are some weird bots on GitHub that don\'t help people work and learn on GitHub, but rather act as data movers.\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'bot-weird-bots-ranking\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'contributions\'\\n  categoryType=\'owner\'\\n  seriesName=\'Contributions\'\\n/>\\n\\n- Some of them will use GitHub as a free place to archive their data, for example, `speedtracker-bot`, `newstools`.\\n\\n- Some of them will periodically upload a timestamp to the code repository as a commit, for example, `keihin00174`.\\n\\n- Some are even crazier and you can\'t even access their profile pages because the number of events generated is so large that GitHub\'s database can\'t process them quickly, for example, `mhutchinson-witness`, `direwolf-github`.\\n\\n    ![Too long time to load bot profile](too_long_time_to_load_profile.png)\\n\\n## Ranks\\n\\nWe ranked the robots according to their contribution.\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'bot-contribution-ranking\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'contributions\'\\n  categoryType=\'owner\'\\n  seriesName=\'Contributions\'\\n/>\\n\\n## Feature\\n\\n\\n\\n## Recommended reading\\n\\n- [Github Stale Bots: A False Economy](https://blog.benwinding.com/github-stale-bots/)\\n- [One million Dependabot pull requests merged](https://github.blog/2019-07-25-one-million-dependabot-pull-requests-merged/)\\n- [Pull Panda is shutting down](https://github.blog/changelog/2022-03-23-pull-panda-is-shutting-down/)\\n- [Best bots to improve your software development process](https://livablesoftware.com/best-bots-software-development/)"},{"id":"/deep-insight-into-js-framework-2021","metadata":{"permalink":"/blog/deep-insight-into-js-framework-2021","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/deep-insight-into-js-framework-2021/index.mdx","source":"@site/blog/deep-insight-into-js-framework-2021/index.mdx","title":"Deep Insights into JavaScript Frameworks","description":"In this chapter, we will share with you some of the top JavaScript Framework repos(JSF repos) on GitHub in 2021 measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"insight","permalink":"/blog/tags/insight"}],"readingTime":2.205,"truncated":true,"authors":[{"name":"Jagger","title":"Engineer of TiDB Community","url":"https://github.com/634750802","imageURL":"https://github.com/634750802.png","key":"Jagger"}],"prevItem":{"title":"Love, Code, and Robot \u2014 Explore robots in the world of code","permalink":"/blog/say-thanks-to-github-robots"},"nextItem":{"title":"Deep Insights into Low-code Development Tools","permalink":"/blog/deep-insight-into-lowcode-development-tools-2021"}},"content":"import {CommonChart} from \\"../../src/components/CommonChart\\";\\n\\nIn this chapter, we will share with you some of **the top JavaScript Framework repos(JSF repos) on GitHub in 2021** measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on. \\n\\nNote: \\n1. You can move your cursor onto any of the repository bars/lines on the chart and get the exact number. \\n2. The SQL commands above each chart are what we use on our TiDB Cloud to get the analytical results. Try those SQL commands by yourselves on TiDB Cloud with this [10-minute tutorial](/blog/try-it-yourself/).\\n\\n\\n## Star history of top JavaScript Framework repos since 2011\\n\\nThe number of stars is often thought of as a measure of whether a github repository is popular or not. We sort all JavaScript framework repositories from github by the total number of historical stars since 2011. For visualizing the results more intuitively, we show the top 10 open source databases by using an interactive line chart. \\n\\n<CommonChart\\n  chart=\'dynamic-stars\'\\n  category=\'archive-2021-top10-star-racing\'\\n  formatSql={false}\\n  repo=\'js_framework_repos\'\\n/>\\n\\n\x3c!--truncate--\x3e\\n\\n## Top 10 most starred JSF repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-stars\'\\n  n={10}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'stars\'\\n  seriesName=\'Stars\'\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## Top 10 JSF repos with the most PRs in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-prs\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'PRs\'\\n  repo=\'js_framework_repos\'\\n/>\\n\\n\\n## Which javascript framework have the widest feedback sources?\\n\\nThe chart below displays the number of issue creators of leading javascript framework each year and their growth trend during the past ten years.\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'rt-jsf-ranking-by-issue-creators\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'Issue Creators\'\\n  categoryType={false}\\n/>\\n\\n\\n## Top 20 developers contributing the most PRs to JSF repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-developers\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'pr_count\'\\n  categoryType=\'owner\'\\n  seriesName=\'PRs\'\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## Top 10 JSF repos with the highest YoY growth rate of stars in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-top20-by-stars-yoy\'\\n  formatSql={false}\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## Top 10 JSF repos with the lowest YoY growth rate of stars in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-bottom10-by-yoy\'\\n  formatSql={false}\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## Top 10 most used programming languages in JSF repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top5-by-languages\'\\n  formatSql={false}\\n  categoryIndex=\'language\'\\n  valueIndex=\'COUNT(*)\'\\n  categoryType=\'lang\'\\n  seriesName=\'PRs\'\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## Top 20 companies contributing the most to JSF repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-companies\'\\n  formatSql={false}\\n  categoryIndex=\'company\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  categoryType={false}\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## Top 10 countries/regions contributing the most to JSF repos in 2021\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'archive-2021-top10-by-regions\'\\n  formatSql={false}\\n  categoryIndex=\'country_code\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  repo=\'js_framework_repos\'\\n/>\\n\\n## The Rankings of JSF repos measured by Z-score in 2021\\n\\nThe analytical results displayed above are generated based on just one single metric of these three: stars, PRs, or contributors. Now, we will use the [Z-score](https://en.wikipedia.org/wiki/Standard_score) method to rank the JSF repos on GitHub.\\n\\nThis is the comprehensive ranking calculated by z-score:\\n\\n<CommonChart\\n  chart=\'zscorechart\'\\n  category=\'archive-2021-archive-ranking\'\\n  formatSql={false}\\n  repo=\'js_framework_repos\'\\n/>"},{"id":"/deep-insight-into-lowcode-development-tools-2021","metadata":{"permalink":"/blog/deep-insight-into-lowcode-development-tools-2021","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/deep-insight-into-lowcode-development-tools-2021/index.mdx","source":"@site/blog/deep-insight-into-lowcode-development-tools-2021/index.mdx","title":"Deep Insights into Low-code Development Tools","description":"In this chapter, we will share with you some of the top low-code development tools repos (LCDT repos) on GitHub in 2021 measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"insight","permalink":"/blog/tags/insight"}],"readingTime":1.685,"truncated":true,"authors":[{"name":"Jagger","title":"Engineer of TiDB Community","url":"https://github.com/634750802","imageURL":"https://github.com/634750802.png","key":"Jagger"}],"prevItem":{"title":"Deep Insights into JavaScript Frameworks","permalink":"/blog/deep-insight-into-js-framework-2021"},"nextItem":{"title":"Deep Insight Into Open Source Databases","permalink":"/blog/deep-insight-into-open-source-databases"}},"content":"import {CommonChart} from \\"../../src/components/CommonChart\\";\\n\\nIn this chapter, we will share with you some of the **top low-code development tools repos (LCDT repos)** on GitHub in 2021 measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on. \\n\\n\x3c!--truncate--\x3e\\n\\nNote: \\n1. You can move your cursor onto any of the repository bars/lines on the chart and get the exact number. \\n2. The SQL commands above each chart are what we use on our TiDB Cloud to get the analytical results. Try those SQL commands by yourselves on TiDB Cloud with this [10-minute tutorial](/blog/try-it-yourself/).\\n\\n## Star history of top LCDT repos since 2011\\n\\n<CommonChart\\n  chart=\'dynamic-stars\'\\n  category=\'archive-2021-top10-star-racing\'\\n  formatSql={false}\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 10 most starred LCDT repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-stars\'\\n  n={10}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'stars\'\\n  seriesName=\'Stars\'\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 10 LCDT repos with the most PRs in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-prs\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'PRs\'\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 20 developers contributing the most PRs to LCDT repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-developers\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'pr_count\'\\n  categoryType=\'owner\'\\n  seriesName=\'PRs\'\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 10 LCDT repos with the highest YoY growth rate in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-top20-by-stars-yoy\'\\n  formatSql={false}\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 10 LCDT repos with the lowest YoY growth rate in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-bottom10-by-yoy\'\\n  formatSql={false}\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 7 most used programming languages in LCDT repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top5-by-languages\'\\n  formatSql={false}\\n  categoryIndex=\'language\'\\n  valueIndex=\'COUNT(*)\'\\n  categoryType=\'lang\'\\n  seriesName=\'PRs\'\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 20 companies contributing the most to LCDT repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-companies\'\\n  formatSql={false}\\n  categoryIndex=\'company\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  categoryType={false}\\n  repo=\'nocode_repos\'\\n/>\\n\\n## Top 20 countries/regions contributing the most to LCDT repos in 2021\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'archive-2021-top10-by-regions\'\\n  formatSql={false}\\n  categoryIndex=\'country_code\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  repo=\'nocode_repos\'\\n/>\\n\\n## The rankings of LCDT repos measured by Z-score in 2021\\n\\nThe analytical results displayed above are generated based on just one single metric of these three: stars, PRs, or contributors. Now, we will use the [Z-score](https://en.wikipedia.org/wiki/Standard_score) method to rank the LCDT repos on GitHub. \\n\\nThis is the comprehensive ranking calculated by z-score:\\n\\n<CommonChart\\n  chart=\'zscorechart\'\\n  category=\'archive-2021-archive-ranking\'\\n  formatSql={false}\\n  repo=\'nocode_repos\'\\n/>"},{"id":"/deep-insight-into-open-source-databases","metadata":{"permalink":"/blog/deep-insight-into-open-source-databases","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/deep-insight-into-open-source-databases/index.mdx","source":"@site/blog/deep-insight-into-open-source-databases/index.mdx","title":"Deep Insight Into Open Source Databases","description":"On this page, we will share with you many deep insights into open source databases, such as the database popularity, database contributors, coding vitality, community feedback and so on.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"insight","permalink":"/blog/tags/insight"}],"readingTime":5.725,"truncated":true,"authors":[{"name":"Jagger","title":"Engineer of TiDB Community","url":"https://github.com/634750802","imageURL":"https://github.com/634750802.png","key":"Jagger"}],"prevItem":{"title":"Deep Insights into Low-code Development Tools","permalink":"/blog/deep-insight-into-lowcode-development-tools-2021"},"nextItem":{"title":"Deep Insights into Programming Languages","permalink":"/blog/deep-insight-into-programming-languages-2021"}},"content":"import {CommonChart} from \\"../../src/components/CommonChart\\";\\nimport ContributorsCharts from \\"../../src/components/ContributorsCharts\\";\\nconst osdbGroup = [507775, 60246359, 17165658, 41986369, 16563587, 6838921, 108110, 166515022, 48833910, 156018, 50229487, 20089857, 5349565, 6934395, 6358188, 11008207, 19961085, 206444, 30753733, 105944401, 31006158, 99919302, 50874442, 84240850, 28738447, 44781140, 372536760, 13124802, 146459443, 28449431, 23418517, 206417, 9342529, 19257422, 196353673, 172104891, 402945349, 11225014, 2649214, 41349039, 114187903, 20587599, 19816070, 69400326, 927442, 24494032]\\n\\nOn this page, we will share with you many deep insights into open source databases, such as the database popularity, database contributors, coding vitality, community feedback and so on. \\n\\nWe\u2019ll also share the SQL commands that generate all these analytical results above each chart, so you can use them on your own on TiDB Cloud following this [10-minute tutorial](/blog/try-it-yourself/). \\n\\n\x3c!--truncate--\x3e\\n\\n## Database Popularity\\n\\n### The popularity trend in the past ten years\\n\\nThe chart below displays the accumulated number of stars open source databases gained respectively each year and their star growth trend during the past ten years.\\n\\n<CommonChart\\n  chart=\'dynamic-stars\'\\n  category=\'archive-2021-top10-star-racing\'\\n  formatSql={false}\\n  repo=\'db_repos\'\\n/>\\n\\n### Which databases experienced a popularity boom in 2021?\\n\\nThe chart below displays top 10 open source databases with the highest year-over-year growth rate of stars in 2021 alone.\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-top20-by-stars-yoy\'\\n  formatSql={false}\\n  repo=\'db_repos\'\\n/>\\n\\n### Which databases barely gained influence in 2021?\\n\\nThe chart below displays top 10 open source databases with the lowest year-over-year growth rate of stars in 2021 alone. \\n\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-bottom10-by-yoy\'\\n  formatSql={false}\\n  repo=\'db_repos\'\\n/>\\n\\n\\n### Which databases were the new favorites in 2021?\\n\\nThe chart below displays the top open source databases that gained the most stars in 2021. \\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-stars\'\\n  n={10}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'stars\'\\n  seriesName=\'Stars\'\\n  repo=\'db_repos\'\\n/>\\n\\n### Which countries & regions favor databases the most? \\n\\nThe map below describes the geographical distribution of database stargazers. The larger and darker the color spots on this map, the more database stargazers are distributed.\\n\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'stars-map\'\\n  formatSql={false}\\n  categoryIndex=\'country_or_area\'\\n  valueIndex=\'count\'\\n  seriesName=\'stargazers\'\\n  effect={false}\\n  size={56}\\n  repoId={osdbGroup}\\n/>\\n\\n### Which companies like databases the most?\\n\\nThe pie chart below describes which company those database stargazers work for and how many stargazers those companies employ.\\n\\n<CommonChart\\n  chart=\'piechart\'\\n  category=\'stars-top-50-company\'\\n  formatSql={false}\\n  categoryIndex=\'company_name\'\\n  valueIndex=\'stargazers\'\\n  categoryType=\'owner\'\\n  seriesName=\'Stargazers\'\\n  repoId={osdbGroup}\\n/>\\n\\n## Database contributors \\n\\n### Which countries & regions led the database contributions in 2021? \\n\\nThe map below shows the geographic distribution of developers who pushed commits, resolved issues, or submitted pull requests to open source databases in 2021. The larger and darker the color spots on this map, the more database contributors were distributed. \\n\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'archive-2021-top10-by-regions\'\\n  formatSql={false}\\n  categoryIndex=\'country_code\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  repo=\'db_repos\'\\n/>\\n\\n### Which companies led the database contributions in 2021?\\n\\nThe chart below shows the employment distribution of developers who pushed commits, resolved issues, or submitted pull requests to open source databases in 2021.\\n\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-companies\'\\n  formatSql={false}\\n  categoryIndex=\'company\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  categoryType={false}\\n  repo=\'db_repos\'\\n/>\\n\\n### Who were the leading individual contributors in 2021?\\n\\nThe chart below lists 20 most active individual contributors to open source databases in 2021 based on how many pull requests they opened. \\n\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-developers\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'pr_count\'\\n  categoryType=\'owner\'\\n  seriesName=\'PRs\'\\n  repo=\'db_repos\'\\n/>\\n\\n### When did developers contribute?\\n\\nThe heat map below describes the number of push events that occur at a particular point of time (UTC). For each day and hour, the colored boxes indicate the number of push events. The lighter the color, the fewer push events; the darker the color, the more push events. You can learn from this heat map what time is the busiest for contributors, and roughly conclude which country or region distributes the most contributors.\\n\\n\\n<CommonChart\\n  chart=\'heatmapchart\'\\n  category=\'commits-time-distribution\'\\n  xIndex=\'hour\'\\n  yIndex=\'dayofweek\'\\n  valueIndex=\'pushes\'\\n  formatSql={false}\\n  repoId={osdbGroup}\\n/>\\n\\n## Database coding vitality \\n\\n### Contribution trend in the past ten years\\n\\nThe chart below displays the accumulated number of commits pushed by contributors to open source database repositories each year, and their growth trend during the past ten years.\\n\\n\\nComing soon\\n\\n### Which databases vibrantly maintains and updates itself in the past ten years?\\n\\nThe chart below displays top 10 open source databases that received the most pull requests in the past ten years. \\n\\nComing soon\\n\\n### Which databases vibrantly maintained and updated itself in 2021?\\n\\nThe chart below displays top 10 open source databases that received the most pull requests in 2021 alone.\\n\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-prs\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'PRs\'\\n  repo=\'db_repos\'\\n/>\\n\\n\\n## Database user feedback \\n\\n### Which databases have the widest feedback sources?\\n\\nThe chart below displays the number of issue creators of leading open source databases each year and their growth trend during the past ten years.\\n\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'rt-osdb-ranking-by-issues\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_group_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'Issue Creators\'\\n  categoryType={false}\\n/>\\n\\n\\n### Which databases gave the fastest first response in 2021?\\n\\nThe bar chart below shows the median time each open source database needs to make its first response to an issue.\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'rt-osdb-ranking-by-median-issue-open-to-first-respond\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_group_name\'\\n  valueIndex=\'days\'\\n  seriesName=\'Days\'\\n  categoryType={false}\\n/>\\n\\n#### Which databases were the most efficient in feedback resolution in 2021?\\n\\nThe bar chart below shows the median time each open source database needs to close an issue.\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'rt-osdb-ranking-by-median-issue-open-to-close\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_group_name\'\\n  valueIndex=\'days\'\\n  seriesName=\'Days\'\\n  categoryType={false}\\n/>\\n\\n### Who gave the feedback in 2021?\\n\\nThe map below shows the geographical distribution of developers who submitted issues to open source databases. The larger and darker the color spots on this map, the more issue openers were distributed. \\n\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'issue-creators-map\'\\n  formatSql={false}\\n  categoryIndex=\'country_or_area\'\\n  valueIndex=\'count\'\\n  seriesName=\'Issue openers\'\\n  effect={false}\\n  size={56}\\n  repoId={osdbGroup}\\n/>\\n\\n## Community Robustness\\n\\n### Contributor growth trend in the past ten years\\n\\nThe chart below shows the accumulated number of contributors leading open source databases attracted respectively each year and their growth trend during the past ten years. \\n\\nComing soon\\n\\n### Which databases have the most heavy contributors? \\n\\nThe chart below displays the number of heavy contributors (who submitted more than 100 pull requests), medium contributors (who submitted more than 10 but less than 100 pull requests), and light contributors (who submitted less than 10 pull requests) of leading open source databases. The chart also ranks these databases based on their number of heavy contributors. \\n\\n<ContributorsCharts type=\'contributors\'/>\\n\\n### Which databases are heavily contributed?\\n\\nThe chart below displays the number of pull requests submitted by heavy contributors, medium contributors, and light contributors. The chart also ranks these databases based on the number of pull requests submitted by heavy contributors. \\n\\n<ContributorsCharts type=\'prs\'/>\\n\\n\\n### How fast did databases approve their code changes?\\n\\nThe chart below shows the median time each open source database needs from submitting to merging a pull request.\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'rt-osdb-ranking-by-median-pr-open-to-merge\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_group_name\'\\n  valueIndex=\'days\'\\n  seriesName=\'Days\'\\n  categoryType={false}\\n/>\\n\\n## Database programming languages\\n\\n### Which languages were most favored in the past ten years?\\n\\nThe chart below shows the top programming languages used in open source databases in the past ten years and how many databases used them each year.\\n\\nComing soon\\n\\n### Which languages were most favored in 2021?\\n\\nThe chart below shows the top programming languages used in pull requests submitted to open source databases in 2021. \\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top5-by-languages\'\\n  formatSql={false}\\n  categoryIndex=\'language\'\\n  valueIndex=\'COUNT(*)\'\\n  categoryType=\'lang\'\\n  seriesName=\'PRs\'\\n  repo=\'db_repos\'\\n/>"},{"id":"/deep-insight-into-programming-languages-2021","metadata":{"permalink":"/blog/deep-insight-into-programming-languages-2021","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/deep-insight-into-programming-languages-2021/index.mdx","source":"@site/blog/deep-insight-into-programming-languages-2021/index.mdx","title":"Deep Insights into Programming Languages","description":"In this chapter, we will share with you some of the top programming language repos (PL repos) on GitHub in 2021 measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"insight","permalink":"/blog/tags/insight"}],"readingTime":1.57,"truncated":true,"authors":[{"name":"Jagger","title":"Engineer of TiDB Community","url":"https://github.com/634750802","imageURL":"https://github.com/634750802.png","key":"Jagger"}],"prevItem":{"title":"Deep Insight Into Open Source Databases","permalink":"/blog/deep-insight-into-open-source-databases"},"nextItem":{"title":"Deep Insights into Web Frameworks","permalink":"/blog/deep-insight-into-web-framework-2021"}},"content":"import {CommonChart} from \\"../../src/components/CommonChart\\";\\n\\nIn this chapter, we will share with you some of **the top programming language repos (PL repos) on GitHub in 2021** measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on. \\n\\n\x3c!--truncate--\x3e\\n\\nNote: \\n\\n1. You can move your cursor onto any of the repository bars/lines on the chart and get the exact number. \\n2. The SQL commands above each chart are what we use on TiDB Cloud to get the analytical results. Try those SQL commands by yourselves on TiDB Cloud with this [10-minute tutorial](/blog/try-it-yourself/).\\n\\n\\n## Star history of top PL repos since 2011\\n\\n<CommonChart\\n  chart=\'dynamic-stars\'\\n  category=\'archive-2021-top10-star-racing\'\\n  formatSql={false}\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top 10 most starred PL repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-stars\'\\n  n={10}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'stars\'\\n  seriesName=\'Stars\'\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top 10 PL repos with the most PRs in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-prs\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'PRs\'\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top 20 developers contributed the most PRs to PL repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-developers\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'pr_count\'\\n  categoryType=\'owner\'\\n  seriesName=\'PRs\'\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top 9 PL repos with the highest YoY growth rate of stars in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-top20-by-stars-yoy\'\\n  formatSql={false}\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top 10 PL repos with the lowest YoY growth rate of stars in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-bottom10-by-yoy\'\\n  formatSql={false}\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top 20 companies contributing the most to PL repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-companies\'\\n  formatSql={false}\\n  categoryIndex=\'company\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  categoryType={false}\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## Top countries or regions contributing to OSS programming languages\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'archive-2021-top10-by-regions\'\\n  formatSql={false}\\n  categoryIndex=\'country_code\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  repo=\'programming_language_repos\'\\n/>\\n\\n## The rankings of PL repos measured by Z-score in 2021\\n\\nThe analytical results displayed above are generated based on just one single metric of these three: stars, PRs, or contributors. Now, we will use the [Z-score](https://en.wikipedia.org/wiki/Standard_score) method to rank PL repos on GitHub.\\n\\nThis is the comprehensive ranking calculated by z-score:\\n\\n<CommonChart\\n  chart=\'zscorechart\'\\n  category=\'archive-2021-archive-ranking\'\\n  formatSql={false}\\n  repo=\'programming_language_repos\'\\n/>"},{"id":"/deep-insight-into-web-framework-2021","metadata":{"permalink":"/blog/deep-insight-into-web-framework-2021","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/deep-insight-into-web-framework-2021/index.mdx","source":"@site/blog/deep-insight-into-web-framework-2021/index.mdx","title":"Deep Insights into Web Frameworks","description":"In this chapter, we will share with you some of the top Web Framework repos (WF repos) on GitHub in 2021 measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"insight","permalink":"/blog/tags/insight"}],"readingTime":2.035,"truncated":true,"authors":[{"name":"Jagger","title":"Engineer of TiDB Community","url":"https://github.com/634750802","imageURL":"https://github.com/634750802.png","key":"Jagger"}],"prevItem":{"title":"Deep Insights into Programming Languages","permalink":"/blog/deep-insight-into-programming-languages-2021"},"nextItem":{"title":"Explore Deep in 4.6 Billion GitHub Events","permalink":"/blog/explore-deep-in-4.6-billion-github-events"}},"content":"import {CommonChart} from \\"../../src/components/CommonChart\\";\\n\\nIn this chapter, we will share with you some of the **top Web Framework repos (WF repos) on GitHub in 2021** measured by different metrics including the number of stars, PRs, contributors, countries, regions and so on. \\n\\n\x3c!--truncate--\x3e\\n\\nNote: \\n1. You can move your cursor onto any of the repository bars/lines on the chart and get the exact number. \\n2. The SQL commands above each chart are what we use on our TiDB Cloud to get the analytical results. Try those SQL commands by yourselves on TiDB Cloud with [this 10-minute tutorial](/blog/try-it-yourself/).\\n\\n## Star history of top Web Framework repos since 2011\\n\\nThe number of stars is often thought of as a measure of whether a github repository is popular or not. We sort all web framework repositories from github by the total number of historical stars since 2011. For visualizing the results more intuitively, we show the top 10 open source databases by using an interactive line chart. \\n\\n<CommonChart\\n  chart=\'dynamic-stars\'\\n  category=\'archive-2021-top10-star-racing\'\\n  formatSql={false}\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 10 most starred Web Framework repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-stars\'\\n  n={10}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'stars\'\\n  seriesName=\'Stars\'\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 10 Web Framework repos with the most PRs in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top10-by-prs\'\\n  n={20}\\n  formatSql={false}\\n  categoryIndex=\'repo_name\'\\n  valueIndex=\'num\'\\n  seriesName=\'PRs\'\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 20 developers contributed the most PRs to Web Framework repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-developers\'\\n  formatSql={false}\\n  categoryIndex=\'actor_login\'\\n  valueIndex=\'pr_count\'\\n  categoryType=\'owner\'\\n  seriesName=\'PRs\'\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 20 Web Framework repos with the highest YoY growth rate of stars in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-top20-by-stars-yoy\'\\n  formatSql={false}\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 10 Web Framework repos with the lowest YoY growth rate of stars in 2021\\n\\n<CommonChart\\n  chart=\'yoychart\'\\n  category=\'archive-2021-bottom10-by-yoy\'\\n  formatSql={false}\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 10 most used programming languages in Web Framework repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top5-by-languages\'\\n  formatSql={false}\\n  categoryIndex=\'language\'\\n  valueIndex=\'COUNT(*)\'\\n  categoryType=\'lang\'\\n  seriesName=\'PRs\'\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 20 companies contributing the most to Web Framework repos in 2021\\n\\n<CommonChart\\n  chart=\'barchart\'\\n  category=\'archive-2021-top20-by-companies\'\\n  formatSql={false}\\n  categoryIndex=\'company\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  categoryType={false}\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## Top 10 countries/regions contributing the most to Web Framework repos in 2021\\n\\n<CommonChart\\n  chart=\'worldmapchart\'\\n  category=\'archive-2021-top10-by-regions\'\\n  formatSql={false}\\n  categoryIndex=\'country_code\'\\n  valueIndex=\'users_count\'\\n  seriesName=\'Contributors\'\\n  repo=\'web_framework_repos\'\\n/>\\n\\n## The Rankings of Web Framework repos measured by Z-score in 2021\\n\\nThe analytical results displayed above are generated based on just one single metric of these three: stars, PRs, or contributors. Now, we will use the [Z-score](https://en.wikipedia.org/wiki/Standard_score) method to rank the WF repos on GitHub.  \\n\\nThis is the comprehensive ranking calculated by z-score:\\n\\n<CommonChart\\n  chart=\'zscorechart\'\\n  category=\'archive-2021-archive-ranking\'\\n  formatSql={false}\\n  repo=\'web_framework_repos\'\\n/>"},{"id":"/explore-deep-in-4.6-billion-github-events","metadata":{"permalink":"/blog/explore-deep-in-4.6-billion-github-events","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/explore-deep-in-4.6-billion-github-events/index.md","source":"@site/blog/explore-deep-in-4.6-billion-github-events/index.md","title":"Explore Deep in 4.6 Billion GitHub Events","description":"Here you can find the answer of what does a view of 4.6 billion Github events really look like and what secrets and values can be discovered in such an enormous amount of data.","date":"2022-05-03T00:00:00.000Z","formattedDate":"May 3, 2022","tags":[{"label":"tidbcloud","permalink":"/blog/tags/tidbcloud"}],"readingTime":9.355,"truncated":true,"authors":[{"name":"Fendy Feng","title":"Technical Content Developer","url":"https://github.com/septemberfd","imageURL":"https://github.com/septemberfd.png","key":"fendy"}],"prevItem":{"title":"Deep Insights into Web Frameworks","permalink":"/blog/deep-insight-into-web-framework-2021"},"nextItem":{"title":"SaaS Insight for Building a Real-time CRM Application","permalink":"/blog/saas-insight-for-building-a-real-time-crm-application"}},"content":"4.6 billion is literally an astronomical figure. The richest star map of our galaxy, brought by Gaia space observatory, includes just under 2 billion stars. What does a view of 4.6 billion GitHub events really look like? What secrets and values can be discovered in such an enormous amount of data? \\n\\nHere you go: [OSSInsight.io](https://ossinsight.io/)** can help you find the answer**. It\u2019s a useful insight tool that can give you the most updated open source intelligence, and help you deeply understand any single GitHub project or quickly compare any two projects by digging deep into 4.6 billion GitHub events in real time. Here are some ways you can play with it.\\n\\n## Compare any two GitHub projects\\n\\nDo you wonder how different projects have performed and developed over time? Which project is worthy of more attention? **[OSSInsight.io](https://ossinsight.io/)** can answer your questions via the [Compare Projects](https://ossinsight.io/analyze/pingcap/tidb) page.\\n\\nLet\u2019s take the [Kubernetes repository](https://github.com/kubernetes/kubernetes)  (K8s) and Docker\u2019s [Moby repository](https://github.com/moby/moby) as examples and compare them in terms of popularity and coding vitality. \\n\\n\\n### **Popularity**\\n\\nTo compare the popularity of two repositories, we use multiple metrics including the number of stars, the growth trend of stars over time, and stargazers\u2019 geographic and employment distribution. \\n\\n#### **Number of stars**\\n\\nThe line chart below shows the accumulated number of stars of K8s and Moby each year. According to the chart, Moby was ahead of K8s until late 2019. The star growth of Moby slowed after 2017 while K8s has kept a steady growth pace. \\n\\n![](./the-star-history.png)\\n\\n<center><em>The star history of K8s and Moby</em></center>\\n\\n\\n#### **Geographical distribution of stargazers**\\n\\nThe map below shows the stargazers\u2019 geographical distribution of Moby and K8s. As you can see, their stargazers are scattered around the world with the majority coming from the US, Europe, and China.\\n\\n![](./geographicla-distribution-of-stargazers.png)\\n\\n\\n<center><em>The geographical distribution of K8s and Moby stargazers</em></center>\\n\\n#### **Employment distribution of stargazers**\\n\\nThe chart below shows the stargazers\u2019 employment of K8s (red) and Moby (dark blue). Both of their stargazers work in a wide range of industries, and most come from leading dotcom companies such as Google, Tencent, and Microsoft. The difference is that the top two companies of K8s\u2019 stargazers are  Google and Microsoft from the US, while Moby\u2019s top two followers are Tencent and Alibaba from China.  \\n\\n![](./employment-distribution-of-stargazers.png)\\n\\n\\n<center><em>The employment distribution of K8s and Moby stargazers</em></center>\\n\\n\x3c!--truncate--\x3e\\n\\n### **Coding vitality**\\n\\nTo compare the coding vitality of two GitHub projects, we use many metrics including the growth trend of pull requests (PRs), the monthly number of PRs, commits and pushes, and the heat map of developers\u2019 contribution time.  \\n\\n#### **Number of commits and pushes**\\n\\nThe bar chart below shows the number of commits and pushes submitted to K8s (top) and Moby (bottom) each month after their inception. Generally speaking, K8s has more pushes and commits than Moby, and their number grew stably until 2020 followed by a slowdown afterwards. Moby\u2019s monthly pushes and commits had a minor growth between 2015 and 2017, and then barely increased after 2018.\\n\\n![](./monthly-pushes-and-commits.png)\\n\\n<center><em>The monthly pushes and commits of K8s (top) and Moby (bottom)</em></center>\\n\\n#### **Number of PRs**\\n\\nThe charts below show the monthly and accumulated number of PRs of the two repositories. As you can see, K8s has received stable and consistent PR contributions ever since its inception and its accumulated number of PRs has also grown steadily. Moby had vibrant PR submissions before late 2017, but started to drop afterwards. Its accumulated number of PRs reached a plateau in 2017, which has remained the case ever since. \\n\\n![](./monthly-and-accumulated-pr-number.png)\\n\\n\\n<center><em>The monthly and accumulated PR number of K8s (top) and Moby (bottom)</em></center>\\n\\n#### **Developers\u2019 contribution time**\\n\\nThe following heat map shows developers\u2019 contribution time for K8s (left) and Moby (right). Each square represents one hour in a day. The darker the color, the more contributions occur during that time. K8s has many more dark parts than Moby, and K8s\u2019 contributions occur almost 24 hours a day, 7 days a week. K8s definitely has more dynamic coding activities than Moby. \\n\\n![](./heat-map.png)\\n\\n\\n<center><em>Heat map of developers\u2019 contribution time of K8s (left) and Moby (right)</em></center>\\n\\n<br />\\n\\n**Taken together**, these metrics show that while both K8s and Moby are popular across industries world-wide, K8s has more vibrant coding activities than Moby. K8s is continuously gaining popularity and coding vitality while Moby is falling in both over time.\\n\\nPopularity and coding vitality are just two dimensions to compare repositories. If you want to discover more insights or compare other projects you are interested in, feel free to visit the [Compare](https://ossinsight.io/analyze/pingcap/tidb) page and explore it for yourself.  \\n\\nOf course, you can use this same page to **deeply explore any single GitHub project** and gain the most up-to-date insights about them. The key metrics and the corresponding changes are presented in a panoramic view. More in-depth analytics such as code changes by PR size groups and PR lines are also available. Explore it for yourself and you\u2019d be surprised. Have fun. \\n\\n![](./panoramic-view-of-key-github-metrics.png)\\n\\n<center><em>Panoramic view of key GitHub metrics (K8s as an example)</em></center>\\n\\n<br />\\n\\n![](./total-pr-number-each-month-and-pr-groups.png)\\n\\n<center><em>  Total PR number each month/PR groups (K8s as an example)</em></center>\\n\\n<br />\\n\\n![](./number-of-lines-of-code-change-each-month.png)\\n\\n<center><em>The number of lines of code change each month (K8s as an example)</em></center>\\n\\n\\n## Key open source insights\\n\\n[OSSInsight.io](https://ossinsight.io/) does more than explore or compare repositories. **It gives you [historical, real-time, and custom open source insights](https://ossinsight.io/database/deep-insight-into-open-source-databases).** In this section, we\u2019ll share some key insights in open source databases and programming languages. If you want to gain insights in other areas, you can explore the [Insights](https://ossinsight.io/database/deep-insight-into-open-source-databases/)  page for yourself. \\n\\n**Note**: If you want to get those analytical results by yourself, you can execute the SQL commands above each chart on TiDB Cloud with ease following this [10-minute tutorial](https://ossinsight.io/blog/try-it-yourself/). \\n\\n\\n### **Rust: the most active programming language**\\n\\nRust was first released in 2012 and has been among the leading programming languages for 10 years. It has the most active repository with a total of 103,047 PRs at the time of writing. \\n\\n<details><summary>Click here to show SQL commands</summary>\\n<p>\\n\\n```sql\\nSELECT\\n    programming_language_repos.name AS repo_name,\\n    COUNT(*)      AS num\\nFROM github_events\\n         JOIN programming_language_repos ON programming_language_repos.id = github_events.repo_id\\nWHERE type = \'PullRequestEvent\'\\n  AND action = \'opened\'\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 10\\n```\\n\\n</p>\\n</details>\\n\\n![](./pr-number-of-pl-repos.png)\\n\\n\\n<center><em>PR numbers of the leading programming languages</em></center>\\n\\n### **Go: the new favorite and the fastest growing programming language**\\n\\nAccording to **[OSSInsight.io](https://ossinsight.io/)**, 10 programming languages dominate the open source community. Go is the most popular with 108,317 stars, followed by Node and TypeScript. Go is also the fastest growing language in popularity.\\n\\n<details><summary>Click here to show SQL commands</summary>\\n<p>\\n\\n```sql\\nWITH repo_stars AS (\\n    SELECT\\n        repo_id,\\n        ANY_VALUE(repos.name) AS repo_name,\\n        COUNT(distinct actor_login) AS stars\\n    FROM github_events\\n         JOIN programming_language_repos repos ON repos.id = github_events.repo_id\\n    WHERE type = \'WatchEvent\'\\n    GROUP BY 1\\n), top_10_repos AS (\\n    SELECT\\n        repo_id, repo_name, stars\\n    FROM repo_stars rs\\n    ORDER BY stars DESC\\n    LIMIT 10\\n), tmp AS (\\n    SELECT\\n        event_year,\\n        tr.repo_name AS repo_name,\\n        COUNT(*) AS year_stars\\n    FROM github_events\\n         JOIN top_10_repos tr ON tr.repo_id = github_events.repo_id\\n    WHERE type = \'WatchEvent\' AND event_year <= 2021\\n    GROUP BY 2, 1\\n    ORDER BY 1 ASC, 2\\n), tmp1 AS (\\n    SELECT\\n        event_year,\\n        repo_name,\\n        SUM(year_stars) OVER(partition by repo_name order by event_year ASC) as stars\\n    FROM tmp\\n    ORDER BY event_year ASC, repo_name\\n)\\nSELECT event_year, repo_name, stars FROM tmp1\\n```\\n\\n</p>\\n</details>\\n\\n![](./star-growth-trends-of-leading-programming-languages.png)\\n\\n<center><em>The star growth trends of leading programming languages</em></center>\\n\\n\\n### **Microsoft and Google: the top two programing languages contributors**\\n\\nAs world-renowned high-tech companies, Microsoft and Google take the lead in open source language contributions with a total of 1,443 and 947 contributors respectively at the time of writing. \\n\\n<details><summary>Click here to show SQL commands</summary>\\n<p>\\n\\n```sql\\nSELECT\\n    TRIM(LOWER(REPLACE(u.company, \'@\', \'\'))) AS company,\\n    COUNT(DISTINCT actor_id)                 AS num\\nFROM\\n    github_events github_events\\n    JOIN programming_language_repos db ON db.id = github_events.repo_id\\n    JOIN users u ON u.login = github_events.actor_login\\nWHERE\\n    github_events.type IN (\\n        \'IssuesEvent\', \'PullRequestEvent\',\'IssueCommentEvent\',\\n        \'PullRequestReviewCommentEvent\', \'CommitCommentEvent\',\\n        \'PullRequestReviewEvent\'\\n    )\\n    AND u.company IS NOT NULL\\n    AND u.company != \'\'\\n    AND u.company != \'none\'\\nGROUP BY 1\\nORDER BY 2 DESC\\nLIMIT 20;\\n```\\n\\n</p>\\n</details>\\n\\n![](./companies-who-contribute-the-most-to-programing-languages.png)\\n\\n\\n<center><em>Companies who contribute the most to programing languages</em></center>\\n\\n\\n### **Elasticsearch draws the most attention**\\n\\nElasticsearch was one of the first open source databases. It is the most liked database with 64,554 stars, followed by Redis and Prometheus. From 2011 to 2016, Elasticseasrch and Redis shared the top spot until Elasticsearch broke away in 2017.\\n\\n<details><summary>Click here to show SQL commands</summary>\\n<p>\\n\\n```sql\\nWITH repo_stars AS (\\n    SELECT\\n        repo_id,\\n        ANY_VALUE(repos.name) AS repo_name,\\n        COUNT(distinct actor_login) AS stars\\n    FROM github_events\\n         JOIN db_repos repos ON repos.id = github_events.repo_id\\n    WHERE type = \'WatchEvent\'\\n    GROUP BY 1\\n), top_10_repos AS (\\n    SELECT\\n        repo_id, repo_name, stars\\n    FROM repo_stars rs\\n    ORDER BY stars DESC\\n    LIMIT 10\\n), tmp AS (\\n    SELECT\\n        event_year,\\n        tr.repo_name AS repo_name,\\n        COUNT(*) AS year_stars\\n    FROM github_events\\n         JOIN top_10_repos tr ON tr.repo_id = github_events.repo_id\\n    WHERE type = \'WatchEvent\' AND event_year <= 2021\\n    GROUP BY 2, 1\\n    ORDER BY 1 ASC, 2\\n), tmp1 AS (\\n    SELECT\\n        event_year,\\n        repo_name,\\n        SUM(year_stars) OVER(partition by repo_name order by event_year ASC) as stars\\n    FROM tmp\\n    ORDER BY event_year ASC, repo_name\\n)\\nSELECT event_year, repo_name, stars FROM tmp1\\n```\\n\\n</p>\\n</details>\\n\\n\\n![](./star-growth-trend-of-leading-databases.png)\\n\\n\\n<center><em>The star growth trend of leading databases</em></center>\\n\\n\\n### **China: the number one fan of open source databases**\\n\\nChina has the most open source database followers with 11,171 stargazers of database repositories, followed by the US and Europe. \\n\\n<details><summary>Click here to show SQL commands</summary>\\n<p>\\n\\n```sql\\nselect upper(u.country_code) as country_or_area, count(*) as count, count(*) / max(s.total) as percentage\\nfrom github_events\\nuse index(index_github_events_on_repo_id)\\nleft join users u ON github_events.actor_login = u.login\\njoin (\\n    -- Get the number of people has the country code.\\n    select count(*) as total\\n    from github_events\\n    use index(index_github_events_on_repo_id)\\n    left join users u ON github_events.actor_login = u.login\\n    where repo_id in (507775, 60246359, 17165658, 41986369, 16563587, 6838921, 108110, 166515022, 48833910, 156018, 50229487, 20089857, 5349565, 6934395, 6358188, 11008207, 19961085, 206444, 30753733, 105944401, 31006158, 99919302, 50874442, 84240850, 28738447, 44781140, 372536760, 13124802, 146459443, 28449431, 23418517, 206417, 9342529, 19257422, 196353673, 172104891, 402945349, 11225014, 2649214, 41349039, 114187903, 20587599, 19816070, 69400326, 927442, 24494032) and github_events.type = \'WatchEvent\' and u.country_code is not null\\n) s\\nwhere repo_id in (507775, 60246359, 17165658, 41986369, 16563587, 6838921, 108110, 166515022, 48833910, 156018, 50229487, 20089857, 5349565, 6934395, 6358188, 11008207, 19961085, 206444, 30753733, 105944401, 31006158, 99919302, 50874442, 84240850, 28738447, 44781140, 372536760, 13124802, 146459443, 28449431, 23418517, 206417, 9342529, 19257422, 196353673, 172104891, 402945349, 11225014, 2649214, 41349039, 114187903, 20587599, 19816070, 69400326, 927442, 24494032) and github_events.type = \'WatchEvent\' and u.country_code is not null\\ngroup by 1\\norder by 2 desc;\\n```\\n\\n</p>\\n</details>\\n\\n![](./geographical-distribution-database-stargazers.png)\\n\\n\\n<center><em>The geographical distribution of open source database stargazers</em></center>\\n\\n\\n**[OSSInsight.io](https://ossinsight.io/)** also allows you to create your own custom insights into any GitHub repository created after 2011. You\u2019re welcome to visit the [Insights page](https://ossinsight.io/database/deep-insight-into-open-source-databases) to explore more. \\n\\n\\n## Run your own analytics with TiDB Cloud\\n\\nAll the analytics on **[OSSInsight.io](https://ossinsight.io/)** are powered by [TiDB Cloud](https://en.pingcap.com/tidb-cloud/), a fully-managed database as a service. If you want to run your own analytics and get your own insights, [sign up for a TiDB Cloud account](https://tidbcloud.com/free-trial?utm_source=ossinsight&utm_medium=referral) and try it for yourself with this [10-minute tutorial](https://ossinsight.io/blog/try-it-yourself/).\\n\\n## Contact us \\n\\nDo you find **[OSSInsight.io](https://ossinsight.io/)** useful and fun to work with? Do you have any question or feedback to share with us? Feel free to [file an issue](https://github.com/pingcap/ossinsight/issues/new) on GitHub or follow us on [Twitter](https://twitter.com/OSSInsight/) to get the latest information. You\u2019re also welcome to share this insight tool with your friends."},{"id":"/saas-insight-for-building-a-real-time-crm-application","metadata":{"permalink":"/blog/saas-insight-for-building-a-real-time-crm-application","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/saas-insight-for-building-a-real-time-crm-application/index.md","source":"@site/blog/saas-insight-for-building-a-real-time-crm-application/index.md","title":"SaaS Insight for Building a Real-time CRM Application","description":"This article describes how to building a real-time CRM application in a better way. Includes the potential database solutions.","date":"2022-05-01T00:00:00.000Z","formattedDate":"May 1, 2022","tags":[{"label":"tidb","permalink":"/blog/tags/tidb"}],"readingTime":2.72,"truncated":false,"authors":[{"name":"ilovesoup","title":"PMM of PingCAP","url":"https://github.com/ilovesoup","imageURL":"https://github.com/ilovesoup.png","key":"ilovesoup"}],"prevItem":{"title":"Explore Deep in 4.6 Billion GitHub Events","permalink":"/blog/explore-deep-in-4.6-billion-github-events"},"nextItem":{"title":"Use TiDB Cloud to Analyze GitHub Events in 10 Minutes","permalink":"/blog/try-it-yourself"}},"content":"> Providing insights on large volume of email data might not be as easy as we thought. While data coming in real-time, indices and metadata are to be built consistently. To make things worse, the data volume is beyond traditional single node databases\' reach.\\n\\n## Background\\n\\nTo store large volumes of real-time user data like email and provide insights is not easy. If your application is layered on top of Gmail to automatically extract and organize the useful information buried inside of our inboxes.\\n\\n It became clear that they were going to need a better system for organizing terabytes of email metadata to power collaboration as their customer base rapidly increased, it is not easy to provide insights. You need to organize email data by first applying a unique identifier to the emails and then proactively indexing the email metadata. The unique identifier is what connects the same email headers across. For each email inserted in real-time, the system extracts meta information from it and builds indices for high concurrent access. When data volume is small, it\'s all good: traditional databases provide all you need. However, when data size grows beyond a single node\'s capacity, everything becomes very hard.\\n\\n## Potential Database Solutions\\n\\nRegarding databases, there are some options you might consider:\\n\\n1. **NoSQL database.** While fairly scalable, it does not provide you indexing and comprehensive query abilities. You might end up implementing them in your application code.\\n2. **Sharing cluster of databases.** Designing sharding key and paying attention to the limitations between shards are painful. It might be fine for applications with simple schema designs, but it will be too complicated for CRM. Moreover, it\'s very hard to maintain.\\n3. **Analytical databases.** They are fine for dashboard and reporting. But not fine for high concurrent updates and index based serving.\\n\\n## How to get real-time insights\\n\\n[TiDB](https://docs.pingcap.com/tidb/stable/overview?utm_source=ossinsight&utm_medium=referral) is a distributed database with user experience of traditional databases. It looks like a super large MySQL without the limitations of NoSQL and sharding cluster solutions. With TiDB, you can simply have the base information, indices and metadata being updated in a concurrent manner with the help of cross-node transaction ability. \\n\\nTo build such a system, you just need following steps:\\n\\n1. **Create schemas** according to your access pattern with indices on user name, organization, job title etc.\\n2. **Use streaming system** to gather and extract meta information from your base data\\n3. **Insert into TiDB via ordinary MySQL client driver like JDBC.** You might want to gather data in small batches of hundreds of rows to speed up ingestion. In a single transaction, updates on base data, indices and meta information are guaranteed to be consistent.\\n4. Optionally, **deploy a couple of [TiFlash](https://docs.pingcap.com/tidb/stable/tiflash-overview?utm_source=ossinsight&utm_medium=referral) nodes** to speed up large scale reporting queries.\\n5. **Access the data** just like in MySQL and you are all done. SQL features for analytics like aggregations, multi-joins or window functions are all supported with great performance.\\n\\nFor more cases, please see [here](https://en.pingcap.com/customers/?utm_source=ossinsight&utm_medium=referral).\\n\\n\\n\\n:::info\\n### \ud83c\udf1f Details in how OSS Insight works\\n\\nGo to read [Use TiDB Cloud to Analyze GitHub Events in 10 Minutes](/blog/try-it-yourself) and use the [Developer Tier](https://tidbcloud.com/free-trial?utm_source=ossinsight&utm_medium=referral) **free** for 1 year.\\n\\nYou can find how we deal with massive github data in [Data Preparation for Analytics](/blog/how-it-works) as well!\\n:::"},{"id":"/try-it-yourself","metadata":{"permalink":"/blog/try-it-yourself","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/try-it-yourself/index.md","source":"@site/blog/try-it-yourself/index.md","title":"Use TiDB Cloud to Analyze GitHub Events in 10 Minutes","description":"In this tutorial, we will provide you with a piece of sample data of all GitHub events occurring on January 1, 2022, and walk you through on how to use TiDB Cloud to analyze this data in 10 minutes.","date":"2022-04-01T00:00:00.000Z","formattedDate":"April 1, 2022","tags":[{"label":"tidbcloud","permalink":"/blog/tags/tidbcloud"}],"readingTime":4.96,"truncated":true,"authors":[{"name":"Fendy Feng","title":"Technical Content Developer","url":"https://github.com/septemberfd","imageURL":"https://github.com/septemberfd.png","key":"fendy"},{"name":"hooopo","title":"Engineer of TiDB Community","url":"https://twitter.com/hooopo","imageURL":"https://github.com/hooopo.png","key":"hooopo"}],"prevItem":{"title":"SaaS Insight for Building a Real-time CRM Application","permalink":"/blog/saas-insight-for-building-a-real-time-crm-application"},"nextItem":{"title":"Data Preparation for Analytics","permalink":"/blog/how-it-works"}},"content":"[TiDB](https://docs.pingcap.com/tidb/stable/overview?utm_source=ossinsight&utm_medium=referral) is an open source distributed NewSQL database with horizontal scalability, high availability, and strong consistency. It can also deal with mixed OLTP and OLAP workloads at the same time by leveraging its hybrid transactional and analytical (HTAP) capability. \\n\\n**[TiDB Cloud](https://docs.pingcap.com/tidbcloud/public-preview?utm_source=ossinsight&utm_medium=referral) is a fully-managed Database-as-a-Service (DBaaS)** that brings everything great about TiDB to your cloud and lets you focus on your applications, not the complexities of your database. \\n\\nIn this tutorial, we will provide you with a piece of sample data of all GitHub events occurring on January 1, 2022, and walk you through on how to use TiDB Cloud to analyze this data in 10 minutes.  \\n\\n## Sign up for a TiDB Cloud account (Free)\\n\\n1. Click [here](https://tidbcloud.com/free-trial?utm_source=ossinsight&utm_medium=referral) to sign up for a TiDB Cloud account free of charge. \\n2. [Log in](https://tidbcloud.com/?utm_source=ossinsight&utm_medium=referral) to your account.\\n\\n\x3c!--truncate--\x3e\\n\\n## Create a TiDB Developer Tier cluster (Free)\\nOnce you register an account, you can create a free cluster with TiDB Developer Tier. \\n\\n:::info\\n A cluster is a database to store data. \\n:::\\n\\n1. Click **Get Started for Free** and start to create a free cluster. \\n\\n![](./dev-tier.png)\\n\\n2. On the **Create a Cluster** page, set up your cluster name and root password.\\n3. Note that the cloud provider is AWS by default, and then **MUST** select the `US-West-2 (Oregon)` region to create the cluster.\\n4. The cluster tier is S1.dev by default.\\n5. Click **Submit**.\\nYour TiDB Cloud cluster will be created in approximately 1 to 3 minutes.\\n\\n:::note\\nThe Developer Tier is **free** for 1 year.\\n:::\\n\\n## Import data to your TiDB Cloud cluster\\n\\n### Import the data\\nOnce your cluster is ready, you can start to import the sample data to your cluster. \\n\\n:::info\\nWe have merged the create database/table in the SQL files, so you don\'t need to `create database/tables` by yourself.\\n\\nIf you want to know the table schema, you can check `desc gharchive_dev` later in the following step. \\n:::\\n\\n1. Click your cluster name in **Active Cluster** page to get into the detail page of your cluster.\\n2. Click the **Import** button on the **Active Clusters** page and then go to the **Data Import Task** page. \\n\\n![](./import.png)\\n\\n3. Copy the values below and paste to the blanks of **Bucket URL** and **Role-ARN** respectively on the **Data Import Task** page.\\n\\n**Bucket URL**:\\n```\\ns3://tidbcloud-samples/gharchive/\\n```\\n**Role-ARN**:\\n```\\narn:aws:iam::385595570414:role/import-sample-access\\n```\\n\\n4. Choose **US West (Oregon)** for your **Bucket region**;\\n5. Tick **TiDB Dumpling** for the **Data Format**. \\n6. Input your cluster password in the blank of **Password** on the **Target Database** section. \\n\\n![](./fill.png)\\n\\n7. After you fill in all the blanks on the **Data Import Task** page, click the **Import** button at the bottom of this page and wait for a few moments for the system to complete data importing. \\n\\n\\n### Use the web shell to check if data is ready\\nTiDB Cloud provides a web shell to connect the database online. \\n1. Click the **Exit** button after you successfully import the data into your cluster. \\n2. Click your cluster name in **Active Cluster** page to get into the detail page of your cluster.\\n3. Then, click the **Connect** button and the **Connect to TiDB** panel pops out. \\n4. Choose **Web SQL Shell** --\x3e **Open SQL Shell**. \\n5. Then input your cluster password as shown in the image below.\\n\\n![](./web-shell.png)\\n\\n\\n### Set column storage replica: TiFlash (Optional but coult make SQL faster!) \\n\\n[TiFlash](https://docs.pingcap.com/tidb/stable/tiflash-overview?utm_source=ossinsight&utm_medium=referral) is the key component that makes TiDB / TiDB Cloud an HTAP database and capable of dealing with OLTP and OLAP workloads at the same time. \\n\\nHere, you can try the following SQL commands on TiDB Cloud to experience its real-time analytics with ease.\\n\\n1. Execute the SQL statements specified below \\n\\n```sql\\nuse gharchive_dev;\\nALTER TABLE github_events SET TIFLASH REPLICA 1;\\n```\\n\\n2. Setting a TiFlash replica will take you some time, so you can use the following SQL statements to check if the procedure is done or not. \\n\\n```sql\\nSELECT * FROM information_schema.tiflash_replica WHERE TABLE_SCHEMA = \'gharchive_dev\' and TABLE_NAME = \'github_events\';\\n```\\n\\nIf the results you get are the same as follows, then it means the procedure is done. \\n\\n```sql\\nmysql> SELECT * FROM information_schema.tiflash_replica WHERE TABLE_SCHEMA = \'gharchive_dev\' and TABLE_NAME = \'github_events\';\\n+---------------+---------------+----------+---------------+-----------------+-----------+----------+\\n| TABLE_SCHEMA  | TABLE_NAME    | TABLE_ID | REPLICA_COUNT | LOCATION_LABELS | AVAILABLE | PROGRESS |\\n+---------------+---------------+----------+---------------+-----------------+-----------+----------+\\n| gharchive_dev | github_events |       68 |             1 |                 |         1 |        1 |\\n+---------------+---------------+----------+---------------+-----------------+-----------+----------+\\n1 row in set (0.27 sec)\\n\\nmysql>\\n```\\n\\n## Analysis!\\n\\nAfter you finish all the steps above, you can start the analytical process. \\n\\n:::tip\\nIf you want to know the table schema, you can use `show create table tbl_name` to get that information.\\n:::\\n\\nBecause you have imported the sample data of all GitHub events occurred on the first hour of 2022 (from 2022-01-01 00:00:00 to 2022-01-01 00:59:59), you can start to make any queries based on that data by using SQL commands. \\n\\n### How many events occurred in total?\\nExecute the following SQL statement to query the total number of events. \\n\\n```sql\\nSELECT count(*) FROM github_events;\\n```\\n\\n### Which repository gets the most stars?\\nExecute the following statements to query the most starred repository. \\n\\n```sql\\n  SELECT repo_name, count(*) AS events_count\\n    FROM github_events\\n   WHERE type = \'WatchEvent\' /* Yes, `WatchEvent` means star */\\nGROUP BY 1\\nORDER BY 2 DESC\\n   LIMIT 20;\\n```\\n\\n\\n## Mini Test\\nHere is a small test for you to practice how to use TiDB Cloud to conduct analytics. \\n\\n### Q: Who is the most active contributor except the robot accounts on the first hour of 2022?\\n\\n### Click for the answer. \u2b07\ufe0f\\n\\n<details><summary>Click me to show answer</summary>\\n\\n```sql\\n  SELECT actor_login, \\n         count(*) AS events_count\\n    FROM github_events\\n   WHERE actor_login NOT LIKE \'%bot%\'\\nGROUP BY 1\\nORDER BY 2 DESC \\n   LIMIT 20;\\n```\\n\\n</details>\\n\\n:::info\\n### \ud83c\udf1f Details in how OSS Insight works\\n\\nFind the reason [How we implement OSS Insight ?](/blog/why-we-choose-tidb-to-support-ossinsight).\\n\\nYou can find how we deal with massive github data in [Data Preparation for Analytics](/blog/how-it-works) as well!\\n:::"},{"id":"/how-it-works","metadata":{"permalink":"/blog/how-it-works","editUrl":"https://github.com/pingcap/ossinsight/edit/main/blog/how-it-works/index.md","source":"@site/blog/how-it-works/index.md","title":"Data Preparation for Analytics","description":"In this section, we will explain step by step how we process the massive data archived by GH Archive which up to 4.7 billion rows.","date":"2022-03-01T00:00:00.000Z","formattedDate":"March 1, 2022","tags":[{"label":"tidbcloud","permalink":"/blog/tags/tidbcloud"}],"readingTime":4.55,"truncated":true,"authors":[{"name":"hooopo","title":"Engineer of TiDB Community","url":"https://twitter.com/hooopo","imageURL":"https://github.com/hooopo.png","key":"hooopo"}],"prevItem":{"title":"Use TiDB Cloud to Analyze GitHub Events in 10 Minutes","permalink":"/blog/try-it-yourself"}},"content":"## Data\\n\\nAll the data we use here on this website sources from [GH Archive](https://www.gharchive.org/), a non-profit project that records and archives all GitHub events data since 2011. The total data volume archived by GH Archive can be up to 4 billion rows. We download the `json file` on GH Archive and convert it into csv format via Script, and finally load it into the TiDB cluster in parallel through [TiDB-Lightning](https://docs.pingcap.com/tidb/stable/tidb-lightning-overview).\\n\\nIn this section, we will explain step by step how we conduct this process. \\n\\n1. Prepare the data in csv format for TiDB Lighting. \\n\\n\x3c!--truncate--\x3e\\n\\n```\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000000.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000001.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000002.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000003.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000004.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000005.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000006.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000007.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000008.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000009.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000010.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000011.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000012.csv\\n\u251c\u2500\u2500 gharchive_dev.github_events.000000000013.csv\\n```\\n\\n2. Configure the TiDB Lightning as follows.\\n\\n```\\ncat tidb-lightning.toml\\n[mydumper.csv]\\nseparator = \',\'\\ndelimiter = \'\\"\'\\nheader = true\\nnot-null = false\\nbackslash-escape = true\\ntrim-last-separator = false\\n\\n[tikv-importer]\\n backend = \\"local\\"\\n sorted-kv-dir = \\"/kvdir/\\"\\n\\ndisk-quota = \\"1.5TiB\\"\\n\\n[mydumper]\\ndata-source-dir = \\"/csv_dir/\\"\\nstrict-format = false\\nno-schema = true\\n\\n[tidb]\\nhost = \\"xxx\\"\\nport = 3306\\nuser = \\"github_events\\"\\npassword = \\"******\\"\\n\\n[lightning]\\ncheck-requirements = false\\nregion-concurrency = 32\\nmeta-schema-name = \\"gharchive_meta\\"\\n```\\n\\n3. Load the data into the TiDB cluster. \\n\\n```bash\\nnohup tidb-lightning -config ./tidb-lightning.toml > nohup.out\\n```\\n\\n4. Convert the unstructured `json file` provided by GH Archive into structured data. \\n\\n```\\ngharchive_dev> desc github_events;\\n+--------------------+--------------+------+-----+---------+-------+\\n| Field              | Type         | Null | Key | Default | Extra |\\n+--------------------+--------------+------+-----+---------+-------+\\n| id                 | bigint(20)   | YES  | MUL | <null>  |       |\\n| type               | varchar(255) | YES  | MUL | <null>  |       |\\n| created_at         | datetime     | YES  | MUL | <null>  |       |\\n| repo_id            | bigint(20)   | YES  | MUL | <null>  |       |\\n| repo_name          | varchar(255) | YES  | MUL | <null>  |       |\\n| actor_id           | bigint(20)   | YES  | MUL | <null>  |       |\\n| actor_login        | varchar(255) | YES  | MUL | <null>  |       |\\n| actor_location     | varchar(255) | YES  |     | <null>  |       |\\n| language           | varchar(255) | YES  | MUL | <null>  |       |\\n| additions          | bigint(20)   | YES  | MUL | <null>  |       |\\n| deletions          | bigint(20)   | YES  | MUL | <null>  |       |\\n| action             | varchar(255) | YES  | MUL | <null>  |       |\\n| number             | int(11)      | YES  |     | <null>  |       |\\n| commit_id          | varchar(255) | YES  | MUL | <null>  |       |\\n| comment_id         | bigint(20)   | YES  | MUL | <null>  |       |\\n| org_login          | varchar(255) | YES  | MUL | <null>  |       |\\n| org_id             | bigint(20)   | YES  | MUL | <null>  |       |\\n| state              | varchar(255) | YES  |     | <null>  |       |\\n| closed_at          | datetime     | YES  | MUL | <null>  |       |\\n| comments           | int(11)      | YES  | MUL | <null>  |       |\\n| pr_merged_at       | datetime     | YES  | MUL | <null>  |       |\\n| pr_merged          | tinyint(1)   | YES  |     | <null>  |       |\\n| pr_changed_files   | int(11)      | YES  | MUL | <null>  |       |\\n| pr_review_comments | int(11)      | YES  | MUL | <null>  |       |\\n| pr_or_issue_id     | bigint(20)   | YES  | MUL | <null>  |       |\\n| event_day          | date         | YES  | MUL | <null>  |       |\\n| event_month        | date         | YES  | MUL | <null>  |       |\\n| author_association | varchar(255) | YES  |     | <null>  |       |\\n| event_year         | int(11)      | YES  | MUL | <null>  |       |\\n| push_size          | int(11)      | YES  |     | <null>  |       |\\n| push_distinct_size | int(11)      | YES  |     | <null>  |       |\\n+--------------------+--------------+------+-----+---------+-------+\\n```\\n\\n5. With structured data at hand, we can start to make further analysis with TiDB Cloud. Execute SQL commands to generate analytical results. For example, you can execute SQL commands below to output the top 10 most starred JavaScript framework repos in 2021.\\n\\n```\\n  SELECT js.name, count(*) as stars \\n    FROM github_events \\n         JOIN js_framework_repos js ON js.id = github_events.repo_id \\n   WHERE type = \'WatchEvent\' and event_year = 2021 \\nGROUP BY 1 \\nORDER BY 2 DESC\\n   LIMIT 10;\\n+-------------------+-------+\\n| name              | stars |\\n+-------------------+-------+\\n| facebook/react    | 22830 |\\n| sveltejs/svelte   | 18573 |\\n| vuejs/vue         | 18015 |\\n| angular/angular   | 11037 |\\n| alpinejs/alpine   | 6993  |\\n| preactjs/preact   | 2965  |\\n| hotwired/stimulus | 1355  |\\n| marko-js/marko    | 1006  |\\n| neomjs/neo        | 826   |\\n| tastejs/todomvc   | 813   |\\n+-------------------+-------+\\n```\\n\\nWe have analyzed all the GitHub projects regarding databases, JavaScripe frameworks, programming languages, web frameworks, and low-code development tools, and provided valuable insights in 2021, in real time, and custom insights. If the repository you care about is not included here, you\'re welcome to submit your PR [here](https://github.com/hooopo/gharchive/tree/main/meta/repos). If you want to gain more insights into other areas, you can try TiDB Cloud by yourselves with this [10-minute tutorial](/blog/try-it-yourself/). \\n\\nBelow are the areas of GitHub projects we have analyzed. \\n\\n```\\ngharchive_dev> show tables;\\n+-----------------------------+\\n| Tables_in_gharchive_dev     |\\n+-----------------------------+\\n| cn_repos                    |\\n| css_framework_repos         |\\n| db_repos                    |\\n| github_events               |\\n| js_framework_repos          |\\n| nocode_repos                |\\n| programming_language_repos  |\\n| static_site_generator_repos |\\n| web_framework_repos         |\\n+-----------------------------+\\n```\\n\\n:::info\\n### \ud83c\udf1f Details in how OSS Insight works\\n\\nGo to read [Use TiDB Cloud to Analyze GitHub Events in 10 Minutes](/blog/try-it-yourself) and use the [Developer Tier](https://tidbcloud.com/free-trial?utm_source=ossinsight&utm_medium=referral) **free** for 1 year.\\n\\nYou can find the reason [How we implement OSS Insight ?](/blog/why-we-choose-tidb-to-support-ossinsight) as well!\\n:::"}]}')}}]);